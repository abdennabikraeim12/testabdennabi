{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Lenovo/Desktop/abdennabi/frontend1/src/app/lib/api.ts"],"sourcesContent":["import axios, { AxiosInstance} from 'axios';\n\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true,\n});\n\nexport const setAuthToken = (token: string | null) => {\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\n\nexport default api;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,MAAqB,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACtC,OAAO;IACP,SAAS;QACP,gBAAgB;IAClB;IACA,iBAAiB;AACnB;AAEO,MAAM,eAAe,CAAC;IAC3B,IAAI,OAAO;QACT,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,OAAO;IAClE,OAAO;QACL,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB;IACrD;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Lenovo/Desktop/abdennabi/frontend1/src/app/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { toast } from \"sonner\";\nimport api, { setAuthToken } from \"../lib/api\";\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (\n    name: string,\n    email: string,\n    password: string,\n  ) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user;\n\n  const fetchUser = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const token = typeof window !== 'undefined' ? localStorage.getItem(\"token\") : null;\n      \n      if (token) {\n        setAuthToken(token);\n        const response = await api.get(\"/auth/me\");\n        setUser(response.data);\n      }\n    } catch (error) {\n      if (typeof window !== 'undefined') {\n        localStorage.removeItem(\"token\");\n      }\n      setAuthToken(null);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchUser();\n  }, [fetchUser]);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await api.post(\"/auth/login\", { email, password });\n      const { access_token } = response.data;\n      \n      if (typeof window !== 'undefined') {\n        localStorage.setItem(\"token\", access_token);\n      }\n      \n      setAuthToken(access_token);\n      await fetchUser();\n      toast.success(\"Logged in successfully\");\n    } catch (error) {\n      toast.error(\"Login failed\");\n      throw error;\n    }\n  };\n\n  const register = async (\n    name: string,\n    email: string,\n    password: string,\n  ) => {\n    try {\n      await api.post(\"/auth/register\", { name, email, password });\n      toast.success(\"Registration successful. Please log in.\");\n    } catch (error) {\n      toast.error(\"Registration failed\");\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(\"token\");\n    }\n    setAuthToken(null);\n    setUser(null);\n    toast.success(\"Logged out successfully\");\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};"],"names":[],"mappings":";;;;;AAEA;AAOA;AACA;AAVA;;;;;AA+BA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAwD,CAAC,EACpE,QAAQ,EACT;IACC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,kBAAkB,CAAC,CAAC;IAE1B,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAC5B,aAAa;QACb,IAAI;YACF,MAAM,QAAQ,6EAAgE;YAE9E,uCAAW;;YAIX;QACF,EAAE,OAAO,OAAO;YACd,uCAAmC;;YAEnC;YACA,CAAA,GAAA,wHAAA,CAAA,eAAY,AAAD,EAAE;YACb,QAAQ;QACV,SAAU;YACR,aAAa;QACf;IACF,GAAG,EAAE;IAEL,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG;QAAC;KAAU;IAEd,MAAM,QAAQ,OAAO,OAAe;QAClC,IAAI;YACF,MAAM,WAAW,MAAM,wHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,eAAe;gBAAE;gBAAO;YAAS;YACjE,MAAM,EAAE,YAAY,EAAE,GAAG,SAAS,IAAI;YAEtC,uCAAmC;;YAEnC;YAEA,CAAA,GAAA,wHAAA,CAAA,eAAY,AAAD,EAAE;YACb,MAAM;YACN,wIAAA,CAAA,QAAK,CAAC,OAAO,CAAC;QAChB,EAAE,OAAO,OAAO;YACd,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ,MAAM;QACR;IACF;IAEA,MAAM,WAAW,OACf,MACA,OACA;QAEA,IAAI;YACF,MAAM,wHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,kBAAkB;gBAAE;gBAAM;gBAAO;YAAS;YACzD,wIAAA,CAAA,QAAK,CAAC,OAAO,CAAC;QAChB,EAAE,OAAO,OAAO;YACd,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ,MAAM;QACR;IACF;IAEA,MAAM,SAAS;QACb,uCAAmC;;QAEnC;QACA,CAAA,GAAA,wHAAA,CAAA,eAAY,AAAD,EAAE;QACb,QAAQ;QACR,wIAAA,CAAA,QAAK,CAAC,OAAO,CAAC;IAChB;IAEA,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAC1B;;;;;;AAGP;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}